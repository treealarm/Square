 
services:
  leafletalarmsservice:
    image: ${DOCKER_REGISTRY-}leafletalarms
    depends_on:
     - redis
     - placement
     - keycloakservice
     - blinkservice
    build:
      context: .
      dockerfile: LeafletAlarms/Dockerfile
    volumes:
      - ./leaflet_data:/leaflet_data
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      #- ASPNETCORE_URLS=http://+:8000;http://+:${GRPC_MAIN_PORT}
      #- Kestrel__Endpoints__gRPC__Url=http://*:${GRPC_MAIN_PORT}
      #- Kestrel__Endpoints__gRPC__Protocols=Http2
      #- Kestrel__Endpoints__Http__Url=http://*:8000
      - APP_PORT=${GRPC_MAIN_PORT}
      - APP_ID=${LEAFLETALARM_APP_ID}
      - HTTP_PORT=${HTTP_PORT} 
    ports:
      - ${GRPC_MAIN_PORT}:${GRPC_MAIN_PORT}
      - ${HTTP_PORT}:${HTTP_PORT}
    env_file:
      - .env
    networks:
      - my-dapr-network

  leafletalarms-dapr:
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "${LEAFLETALARM_APP_ID}",
      "--app-port", "${GRPC_MAIN_PORT}",
      "--app-protocol", "grpc",
      "--placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
      "--resources-path", "/components"
    ]
    volumes:
        - "${DAPR_COMPONENTS}:/components"
    depends_on:
      - leafletalarmsservice
    # нужно указать network_mode чтобы коляска имела доступ к портам сервиса
    network_mode: "service:leafletalarmsservice"
    env_file:
      - .env


  grpctracksclient:
    image: ${DOCKER_REGISTRY-}grpctracksclient
    build:
      context: .
      dockerfile: GrpcTracksClient/Dockerfile
    env_file:
      - .env
    environment:
      - VALHALLA_PORT=${VALHALLA_PORT}
      - APP_PORT=${DAPR_CLI_PORT}
      - APP_ID=${TRACKS_CLIENT_APP_ID}
    depends_on:
      - redis
      - placement
      - valhallaservice
    ports:
      - ${DAPR_CLI_PORT}:${DAPR_CLI_PORT}
    networks:
      - my-dapr-network

  grpctracksclient-dapr:
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "${TRACKS_CLIENT_APP_ID}",
      "--app-port", "${DAPR_CLI_PORT}",
      "--app-protocol", "grpc",
      "--placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
      "--resources-path", "/components"
      ]
    volumes:
        - "${DAPR_COMPONENTS}:/components"
    depends_on:
      - grpctracksclient
    # нужно указать network_mode чтобы коляска имела доступ к портам сервиса
    network_mode: "service:grpctracksclient"


  blinkservice:
    image: ${DOCKER_REGISTRY-}blinkservice
    build:
      context: .
      dockerfile: BlinkService/Dockerfile
    env_file:
      - .env
    depends_on:
      - redis
      - placement    
    environment:
      - APP_ID=${BLINK_APP_ID}
    networks:
      - my-dapr-network

  blinkservice-dapr:
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "${BLINK_APP_ID}",
      "--app-protocol", "grpc",
      "--placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
      "--resources-path", "/components"
      ]
    volumes:
        - "${DAPR_COMPONENTS}:/components"
    depends_on:
      - blinkservice
    # нужно указать network_mode чтобы коляска имела доступ к портам сервиса
    network_mode: "service:blinkservice"
    env_file:
      - .env
  
# START keycloack
  postgresservice:
    image: postgis/postgis
    restart: unless-stopped
    volumes:
      - ./leaflet_data/postgres_data:/var/lib/postgresql/data
      - ./leaflet_data/initdb:/docker-entrypoint-initdb.d
    ports:
      - "${MapDatabase__PgPort}:${MapDatabase__PgPort}"
    networks:
      - my-dapr-network
    env_file:
      - .env

  keycloakservice:
    image: quay.io/keycloak/keycloak:latest
    restart: unless-stopped
    volumes:
      - ./keycloak_imports:/opt/keycloak/data/import
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresservice:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

      KEYCLOAK_LOGLEVEL: ALL
      ROOT_LOGLEVEL: ALL
    command: 
      - start-dev
      - --import-realm
    ports:
      - 8080:8080
    depends_on:
      - postgresservice
    networks:
      - my-dapr-network
# command2export realm:docker exec -ti leaflet-keycloakservice-1 /opt/keycloak/bin/kc.sh export --file /opt/keycloak/data/import/realm-export1.json --realm myrealm
# END keycloak

  valhallaservice:
    image: ghcr.io/gis-ops/docker-valhalla/valhalla:latest
    restart: unless-stopped
    container_name: valhalla_latest
    ports:
      - ${VALHALLA_PORT}:${VALHALLA_PORT}
    volumes:
      - ./leaflet_data/valhalla_custom_files/:/custom_files
    networks:
      - my-dapr-network

  ############################
  #DAPR SERVICES
  ############################
  placement:
    image: "daprio/dapr"
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - my-dapr-network
  ############################
  # Redis state store
  ############################
  redis:
    image: redis
    restart: unless-stopped
    environment:
     - ALLOW_EMPTY_PASSWORD=yes
    ports:
     - "${REDIS_PORT}:6379"
    networks:
      - my-dapr-network

networks:
  my-dapr-network:
    driver: bridge


