############################
# Общие настройки для всех сервисов
############################
x-defaults: &default-service
  restart: unless-stopped
  networks:
    - my-dapr-network

services:
  ############################
  # Leaflet Alarms Service
  ############################
  leafletalarmsservice:
    <<: *default-service
    image: ${DOCKER_REGISTRY-}leafletalarms
    depends_on:
      - redis
      - placement
      - keycloakservice
      - blinkservice
    build:
      context: .
      dockerfile: LeafletAlarms/Dockerfile
    volumes:
      - ${ROOT_DATA}:/leaflet_data
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - APP_PORT=${GRPC_MAIN_PORT}
      - APP_ID=${LEAFLETALARM_APP_ID}
      - HTTP_PORT=${HTTP_PORT} 
      - PLACEMENT_PORT=${PLACEMENT_PORT}
    ports:
      - ${GRPC_MAIN_PORT}:${GRPC_MAIN_PORT}
      - ${HTTP_PORT}:${HTTP_PORT}
    env_file:
      - .env

  # Dapr sidecar для Leaflet Alarms
  leafletalarms-dapr:
    restart: unless-stopped
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "${LEAFLETALARM_APP_ID}",
      "--app-port", "${GRPC_MAIN_PORT}",
      "--app-protocol", "grpc",
      "--placement-host-address", "placement:${PLACEMENT_PORT}",
      "--resources-path", "/components"
    ]
    volumes:
      - "${DAPR_COMPONENTS}:/components"
    depends_on:
      - leafletalarmsservice
    # Для коляски используем network_mode, networks не нужны
    network_mode: "service:leafletalarmsservice"
    env_file:
      - .env

  ############################
  # AASubService
  ############################
  aasubservice:
    <<: *default-service
    image: ${DOCKER_REGISTRY-}aasubservice
    build:
      context: .
      dockerfile: AASubService/Dockerfile
    env_file:
      - .env
    environment:
      - VALHALLA_PORT=${VALHALLA_PORT}
      - APP_PORT=${GRPC_AASUBSERVICE_PORT}
      - APP_ID=${AASUBSERVICE_APP_ID}
      - PLACEMENT_PORT=${PLACEMENT_PORT}
    depends_on:
      - redis
      - placement
    ports:
      - ${GRPC_AASUBSERVICE_PORT}:${GRPC_AASUBSERVICE_PORT}

  aasubservice-dapr:
    restart: unless-stopped
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "${AASUBSERVICE_APP_ID}",
      "--app-port", "${GRPC_AASUBSERVICE_PORT}",
      "--app-protocol", "grpc",
      "--placement-host-address", "placement:${PLACEMENT_PORT}",
      "--resources-path", "/components"
    ]
    volumes:
      - "${DAPR_COMPONENTS}:/components"
    depends_on:
      - aasubservice
    network_mode: "service:aasubservice"

  ############################
  # GrpcTracksClient
  ############################
  grpctracksclient:
    <<: *default-service
    image: ${DOCKER_REGISTRY-}grpctracksclient
    build:
      context: .
      dockerfile: GrpcTracksClient/Dockerfile
    env_file:
      - .env
    environment:
      - VALHALLA_PORT=${VALHALLA_PORT}
      - APP_PORT=${DAPR_CLI_PORT}
      - APP_ID=${TRACKS_CLIENT_APP_ID}
      - PLACEMENT_PORT=${PLACEMENT_PORT}
    depends_on:
      - redis
      - placement
      - valhallaservice
    ports:
      - ${DAPR_CLI_PORT}:${DAPR_CLI_PORT}

  grpctracksclient-dapr:
    restart: unless-stopped
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "${TRACKS_CLIENT_APP_ID}",
      "--app-port", "${DAPR_CLI_PORT}",
      "--app-protocol", "grpc",
      "--placement-host-address", "placement:${PLACEMENT_PORT}",
      "--resources-path", "/components"
    ]
    volumes:
      - "${DAPR_COMPONENTS}:/components"
    depends_on:
      - grpctracksclient
    network_mode: "service:grpctracksclient"

  ############################
  # BlinkService
  ############################
  blinkservice:
    <<: *default-service
    image: ${DOCKER_REGISTRY-}blinkservice
    build:
      context: .
      dockerfile: BlinkService/Dockerfile
    env_file:
      - .env
    depends_on:
      - redis
      - placement
    environment:
      - APP_ID=${BLINK_APP_ID}
      - PLACEMENT_PORT=${PLACEMENT_PORT}

  blinkservice-dapr:
    restart: unless-stopped
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "${BLINK_APP_ID}",
      "--app-protocol", "grpc",
      "--placement-host-address", "placement:${PLACEMENT_PORT}",
      "--resources-path", "/components"
    ]
    volumes:
      - "${DAPR_COMPONENTS}:/components"
    depends_on:
      - blinkservice
    network_mode: "service:blinkservice"
    env_file:
      - .env

  ############################
  # Postgres & Keycloak
  ############################
  postgresservice:
    <<: *default-service
    image: postgis/postgis
    volumes:
      - ${ROOT_DATA}/postgres_data:/var/lib/postgresql/data
      - ${INIT_FILES}/initdb:/docker-entrypoint-initdb.d
    ports:
      - "${MapDatabase__PgPort}:${MapDatabase__PgPort}"
    env_file:
      - .env

  keycloakservice:
    <<: *default-service
    image: quay.io/keycloak/keycloak:latest
    volumes:
      - ${INIT_FILES}/keycloak_imports:/opt/keycloak/data/import
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresservice:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_LOGLEVEL: ALL
      ROOT_LOGLEVEL: ALL
    command: 
      - start-dev
      - --import-realm
    ports:
      - 8080:8080
    depends_on:
      - postgresservice

# command2export realm:docker exec -ti leaflet-keycloakservice-1 /opt/keycloak/bin/kc.sh export --file /opt/keycloak/data/import/realm-export1.json --realm myrealm

  ############################
  # Valhalla
  ############################
  valhallaservice:
    <<: *default-service
    image: ghcr.io/gis-ops/docker-valhalla/valhalla:latest
    container_name: valhalla_latest
    ports:
      - ${VALHALLA_PORT}:${VALHALLA_PORT}
    volumes:
      - ${ROOT_DATA}/valhalla_custom_files/:/custom_files

  ############################
  # Dapr placement
  ############################
  placement:
    <<: *default-service
    image: "daprio/dapr"
    command: ["./placement", "-port", "${PLACEMENT_PORT}"]
    ports:
      - "${PLACEMENT_PORT}:${PLACEMENT_PORT}"

  ############################
  # Redis state store
  ############################
  redis:
    <<: *default-service
    image: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "${REDIS_PORT}:6379"

networks:
  my-dapr-network:
    driver: bridge
