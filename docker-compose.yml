version: '3.8'
 
services:
  leafletalarmsservice:
    image: ${DOCKER_REGISTRY-}leafletalarms
    depends_on:
     - mongoservice
     - keycloakservice
     - redisservice
    build:
      context: .
      dockerfile: LeafletAlarms/Dockerfile
    volumes:
      - ./leaflet_data:/leaflet_data
    env_file:
      - global.env
      - .env

  leafletalarms-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "leafletalarms", "-app-port", "${GRPC_MAIN_PORT}", "-app-protocol", "grpc" ]
    depends_on:
      - leafletalarmsservice
    network_mode: "service:leafletalarmsservice"
    env_file:
      - .env

  # routermicroservice:
  #   image: ${DOCKER_REGISTRY-}routermicroservice
  #   restart: unless-stopped
  #   depends_on:
  #    - mongoservice
  #   build:
  #     context: .
  #     dockerfile: RouterMicroService/Dockerfile
  #   volumes:
  #    - ./leaflet_data:/leaflet_data
  #   env_file:
  #     - global.env

  #tracksenderservice:
  #  image: ${DOCKER_REGISTRY-}tracksenderservice
  #  restart: "no"
  #  depends_on:
  #   - leafletalarmsservice
  #  build:
  #    context: .
  #    dockerfile: TrackSender/Dockerfile
  #  volumes:
  #   - ./leaflet_data:/leaflet_data

  grpctracksclient:
    image: ${DOCKER_REGISTRY-}grpctracksclient
    build:
      context: .
      dockerfile: GrpcTracksClient/Dockerfile
    env_file:
      - global.env
      - .env
    environment:
      - VALHALLA_PORT:${VALHALLA_PORT}
    depends_on:
      - valhallaservice

  grpctracksclient-dapr:
    image: "daprio/daprd:latest"
    command: [ 
      "./daprd", 
      "--app-id", "grpctracksclient",
      "--dapr-grpc-port","${DAPR_CLI_PORT}",
      ]
    depends_on:
      - grpctracksclient
    #network_mode: "service:grpctracksclient"
    env_file:
      - global.env
      - .env
    ports:
      - ${DAPR_CLI_PORT}:${DAPR_CLI_PORT}
  
  mongoservice:
    image : mongo
    container_name: mongodb
    restart: unless-stopped
    volumes: 
      #- ./mongo_data/:/data/db #this option put all into yml folder
     - ./leaflet_data/mongo_data/:/data/db
    ports:
     - "27017:27017"
     #- "27018:27017"

  redisservice:
    image: redis
    restart: unless-stopped
    environment:
     - ALLOW_EMPTY_PASSWORD=yes
    ports:
     - "6379:6379"

# START keycloack
  postgresservice:
    image: postgres
    restart: unless-stopped
    volumes:
      - ./leaflet_data/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432

  keycloakservice:
    image: quay.io/keycloak/keycloak:21.0.1
    restart: unless-stopped
    volumes:
      - ./keycloak_imports:/opt/keycloak/data/import
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresservice:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

      KEYCLOAK_LOGLEVEL: ALL
      ROOT_LOGLEVEL: ALL
    command: 
      - start-dev
      - --import-realm
    ports:
      - 8080:8080
    depends_on:
      - postgresservice
# command2export realm:docker exec -ti leaflet-keycloakservice-1 /opt/keycloak/bin/kc.sh export --file /opt/keycloak/data/import/realm-export1.json --realm myrealm
# END keycloak

  valhallaservice:
    image: ghcr.io/gis-ops/docker-valhalla/valhalla:latest
    restart: unless-stopped
    container_name: valhalla_latest
    ports:
      - ${VALHALLA_PORT}:${VALHALLA_PORT}
    volumes:
      - ./leaflet_data/valhalla_custom_files/:/custom_files
