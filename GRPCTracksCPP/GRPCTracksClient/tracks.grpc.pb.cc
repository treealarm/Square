// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tracks.proto

#include "tracks.pb.h"
#include "tracks.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tracks {

static const char* TracksGrpcService_method_names[] = {
  "/tracks.TracksGrpcService/UpdateFigures",
  "/tracks.TracksGrpcService/UpdateStates",
  "/tracks.TracksGrpcService/UpdateTracks",
};

std::unique_ptr< TracksGrpcService::Stub> TracksGrpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TracksGrpcService::Stub> stub(new TracksGrpcService::Stub(channel, options));
  return stub;
}

TracksGrpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateFigures_(TracksGrpcService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateStates_(TracksGrpcService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTracks_(TracksGrpcService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TracksGrpcService::Stub::UpdateFigures(::grpc::ClientContext* context, const ::tracks::ProtoFigures& request, ::tracks::ProtoFigures* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tracks::ProtoFigures, ::tracks::ProtoFigures, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateFigures_, context, request, response);
}

void TracksGrpcService::Stub::async::UpdateFigures(::grpc::ClientContext* context, const ::tracks::ProtoFigures* request, ::tracks::ProtoFigures* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tracks::ProtoFigures, ::tracks::ProtoFigures, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFigures_, context, request, response, std::move(f));
}

void TracksGrpcService::Stub::async::UpdateFigures(::grpc::ClientContext* context, const ::tracks::ProtoFigures* request, ::tracks::ProtoFigures* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFigures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tracks::ProtoFigures>* TracksGrpcService::Stub::PrepareAsyncUpdateFiguresRaw(::grpc::ClientContext* context, const ::tracks::ProtoFigures& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tracks::ProtoFigures, ::tracks::ProtoFigures, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateFigures_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tracks::ProtoFigures>* TracksGrpcService::Stub::AsyncUpdateFiguresRaw(::grpc::ClientContext* context, const ::tracks::ProtoFigures& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateFiguresRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TracksGrpcService::Stub::UpdateStates(::grpc::ClientContext* context, const ::tracks::ProtoObjectStates& request, ::google::protobuf::BoolValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tracks::ProtoObjectStates, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateStates_, context, request, response);
}

void TracksGrpcService::Stub::async::UpdateStates(::grpc::ClientContext* context, const ::tracks::ProtoObjectStates* request, ::google::protobuf::BoolValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tracks::ProtoObjectStates, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStates_, context, request, response, std::move(f));
}

void TracksGrpcService::Stub::async::UpdateStates(::grpc::ClientContext* context, const ::tracks::ProtoObjectStates* request, ::google::protobuf::BoolValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* TracksGrpcService::Stub::PrepareAsyncUpdateStatesRaw(::grpc::ClientContext* context, const ::tracks::ProtoObjectStates& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::BoolValue, ::tracks::ProtoObjectStates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* TracksGrpcService::Stub::AsyncUpdateStatesRaw(::grpc::ClientContext* context, const ::tracks::ProtoObjectStates& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TracksGrpcService::Stub::UpdateTracks(::grpc::ClientContext* context, const ::tracks::TrackPointsProto& request, ::google::protobuf::BoolValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tracks::TrackPointsProto, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTracks_, context, request, response);
}

void TracksGrpcService::Stub::async::UpdateTracks(::grpc::ClientContext* context, const ::tracks::TrackPointsProto* request, ::google::protobuf::BoolValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tracks::TrackPointsProto, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTracks_, context, request, response, std::move(f));
}

void TracksGrpcService::Stub::async::UpdateTracks(::grpc::ClientContext* context, const ::tracks::TrackPointsProto* request, ::google::protobuf::BoolValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTracks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* TracksGrpcService::Stub::PrepareAsyncUpdateTracksRaw(::grpc::ClientContext* context, const ::tracks::TrackPointsProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::BoolValue, ::tracks::TrackPointsProto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTracks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* TracksGrpcService::Stub::AsyncUpdateTracksRaw(::grpc::ClientContext* context, const ::tracks::TrackPointsProto& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTracksRaw(context, request, cq);
  result->StartCall();
  return result;
}

TracksGrpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TracksGrpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TracksGrpcService::Service, ::tracks::ProtoFigures, ::tracks::ProtoFigures, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TracksGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tracks::ProtoFigures* req,
             ::tracks::ProtoFigures* resp) {
               return service->UpdateFigures(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TracksGrpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TracksGrpcService::Service, ::tracks::ProtoObjectStates, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TracksGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tracks::ProtoObjectStates* req,
             ::google::protobuf::BoolValue* resp) {
               return service->UpdateStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TracksGrpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TracksGrpcService::Service, ::tracks::TrackPointsProto, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TracksGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tracks::TrackPointsProto* req,
             ::google::protobuf::BoolValue* resp) {
               return service->UpdateTracks(ctx, req, resp);
             }, this)));
}

TracksGrpcService::Service::~Service() {
}

::grpc::Status TracksGrpcService::Service::UpdateFigures(::grpc::ServerContext* context, const ::tracks::ProtoFigures* request, ::tracks::ProtoFigures* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TracksGrpcService::Service::UpdateStates(::grpc::ServerContext* context, const ::tracks::ProtoObjectStates* request, ::google::protobuf::BoolValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TracksGrpcService::Service::UpdateTracks(::grpc::ServerContext* context, const ::tracks::TrackPointsProto* request, ::google::protobuf::BoolValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tracks

